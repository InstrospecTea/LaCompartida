<?php

require_once dirname(__FILE__) . '/../../../classes/SolicitudAdelanto.php';

/**
 * Test class for SolicitudAdelanto.
 * Generated by PHPUnit on 2012-06-21 at 10:13:34.
 */
class SolicitudAdelantoTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var SolicitudAdelanto
	 */
	protected $object;
	protected $default_fixture;
	protected $estados;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers SolicitudAdelanto::SearchQuery
	 * @todo Implement testSearchQuery().
	 */
	public function testSearchQuery() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SolicitudAdelanto::GetEstados
	 */
	public function testGetEstados() {
		$this->assertEquals($this->estados, SolicitudAdelanto::GetEstados());
	}

	/**
	 * @covers SolicitudAdelanto::Prepare
	 */
	public function testPrepare() {
		unset($this->default_fixture['id_solicitud_adelanto']);
		unset($this->default_fixture['estado']);
		
		$this->object->Fill($this->default_fixture);
		
		$this->object->Prepare();
		
		// Estado por defecto es 'CREADO'
		$this->assertEquals('CREADO', $this->object->fields['estado']);
		
		// Fecha debe ser valida para SQL
		$this->assertEquals('2012-02-01', $this->object->fields['fecha']);
	}

	/**
	 * @covers SolicitudAdelanto::Validate
	 */
	public function testCheck() {
		// Un objeto vacío no me debe dejar guardar
		$this->assertFalse($this->object->Check());
		
		$this->object->Fill($this->default_fixture);
		$this->object->Prepare();
		
		// Uno lleno, si funciona
		$this->assertTrue($this->object->Check());
		
		// Monto obligatorio
		unset($this->object->fields['monto']);
		$this->assertFalse($this->object->Check());
		$this->object->fields['monto'] = $this->default_fixture['monto'];
		
		// Cliente obligatorio
		unset($this->object->fields['codigo_cliente']);
		$this->assertFalse($this->object->Check());
		$this->object->fields['codigo_cliente'] = $this->default_fixture['codigo_cliente'];
		
		// Descripcion obligatorio
		unset($this->object->fields['descripcion']);
		$this->assertFalse($this->object->Check());
		$this->object->fields['descripcion'] = $this->default_fixture['descripcion'];
		
		// Moneda obligatoria
		unset($this->object->fields['id_moneda']);
		$this->assertFalse($this->object->Check());
		$this->object->fields['id_moneda'] = $this->default_fixture['id_moneda'];
		
		// Fecha obligatoria
		$fecha_valida = $this->object->fields['fecha'];
		unset($this->object->fields['fecha']);
		$this->assertFalse($this->object->Check());
		
		// Fecha válida
		$this->object->fields['fecha'] = 'hola mundo';
		$this->assertFalse($this->object->Check());
		
		$this->object->fields['fecha'] = '2012-02-31';
		$this->assertFalse($this->object->Check());
		$this->object->fields['fecha'] = $fecha_valida;
		
		// Estado obligatorio
		unset($this->object->fields['estado']);
		$this->assertFalse($this->object->Check());
		$this->object->fields['estado'] = $this->default_fixture['estado'];
		
		// Estado distinto de los permitidos
		$this->object->fields['estado'] = 'ESTADO NO PERMITIDO';
		$this->assertFalse($this->object->Check());
		$this->object->fields['estado'] = $this->default_fixture['estado'];
	}

	/**
	 * @covers SolicitudAdelanto::Delete
	 */
	public function testCheckDelete() {
		// Que cosas sera necesaria considerar para borrar una solicitud?
	}
}

?>
